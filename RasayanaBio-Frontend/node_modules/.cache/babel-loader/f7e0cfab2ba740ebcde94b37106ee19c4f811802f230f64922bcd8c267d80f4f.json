{"ast":null,"code":"/**\r\n * Currency formatting utilities for Indian Rupees\r\n * Using proper Indian Rupee symbol and formatting\r\n */\n\nexport const formatCurrency = amount => {\n  return new Intl.NumberFormat('en-IN', {\n    style: 'currency',\n    currency: 'INR',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  }).format(amount);\n};\nexport const formatPrice = amount => {\n  // Format with Indian number system (lakhs, crores)\n  // Force Indian Rupee symbol and formatting\n  if (typeof amount !== 'number') {\n    amount = parseFloat(amount) || 0;\n  }\n  return `₹${amount.toLocaleString('en-IN')}`;\n};\nexport const formatPriceWithDecimals = amount => {\n  return `₹${amount.toLocaleString('en-IN', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  })}`;\n};\nexport const formatPriceCompact = amount => {\n  if (amount >= 10000000) {\n    // 1 crore\n    return `₹${(amount / 10000000).toFixed(1)}Cr`;\n  } else if (amount >= 100000) {\n    // 1 lakh\n    return `₹${(amount / 100000).toFixed(1)}L`;\n  } else if (amount >= 1000) {\n    // 1 thousand\n    return `₹${(amount / 1000).toFixed(1)}K`;\n  }\n  return formatPrice(amount);\n};","map":{"version":3,"names":["formatCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatPrice","parseFloat","toLocaleString","formatPriceWithDecimals","formatPriceCompact","toFixed"],"sources":["C:/Users/YSXP/Desktop/RasanayaBio/RasayanaBio-Frontend/src/utils/currency.js"],"sourcesContent":["/**\r\n * Currency formatting utilities for Indian Rupees\r\n * Using proper Indian Rupee symbol and formatting\r\n */\r\n\r\nexport const formatCurrency = (amount) => {\r\n  return new Intl.NumberFormat('en-IN', {\r\n    style: 'currency',\r\n    currency: 'INR',\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n  }).format(amount);\r\n};\r\n\r\nexport const formatPrice = (amount) => {\r\n  // Format with Indian number system (lakhs, crores)\r\n  // Force Indian Rupee symbol and formatting\r\n  if (typeof amount !== 'number') {\r\n    amount = parseFloat(amount) || 0;\r\n  }\r\n  return `₹${amount.toLocaleString('en-IN')}`;\r\n};\r\n\r\nexport const formatPriceWithDecimals = (amount) => {\r\n  return `₹${amount.toLocaleString('en-IN', { \r\n    minimumFractionDigits: 2, \r\n    maximumFractionDigits: 2 \r\n  })}`;\r\n};\r\n\r\nexport const formatPriceCompact = (amount) => {\r\n  if (amount >= 10000000) { // 1 crore\r\n    return `₹${(amount / 10000000).toFixed(1)}Cr`;\r\n  } else if (amount >= 100000) { // 1 lakh\r\n    return `₹${(amount / 100000).toFixed(1)}L`;\r\n  } else if (amount >= 1000) { // 1 thousand\r\n    return `₹${(amount / 1000).toFixed(1)}K`;\r\n  }\r\n  return formatPrice(amount);\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAO,MAAMA,cAAc,GAAIC,MAAM,IAAK;EACxC,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;IACpCC,KAAK,EAAE,UAAU;IACjBC,QAAQ,EAAE,KAAK;IACfC,qBAAqB,EAAE,CAAC;IACxBC,qBAAqB,EAAE;EACzB,CAAC,CAAC,CAACC,MAAM,CAACP,MAAM,CAAC;AACnB,CAAC;AAED,OAAO,MAAMQ,WAAW,GAAIR,MAAM,IAAK;EACrC;EACA;EACA,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC9BA,MAAM,GAAGS,UAAU,CAACT,MAAM,CAAC,IAAI,CAAC;EAClC;EACA,OAAO,IAAIA,MAAM,CAACU,cAAc,CAAC,OAAO,CAAC,EAAE;AAC7C,CAAC;AAED,OAAO,MAAMC,uBAAuB,GAAIX,MAAM,IAAK;EACjD,OAAO,IAAIA,MAAM,CAACU,cAAc,CAAC,OAAO,EAAE;IACxCL,qBAAqB,EAAE,CAAC;IACxBC,qBAAqB,EAAE;EACzB,CAAC,CAAC,EAAE;AACN,CAAC;AAED,OAAO,MAAMM,kBAAkB,GAAIZ,MAAM,IAAK;EAC5C,IAAIA,MAAM,IAAI,QAAQ,EAAE;IAAE;IACxB,OAAO,IAAI,CAACA,MAAM,GAAG,QAAQ,EAAEa,OAAO,CAAC,CAAC,CAAC,IAAI;EAC/C,CAAC,MAAM,IAAIb,MAAM,IAAI,MAAM,EAAE;IAAE;IAC7B,OAAO,IAAI,CAACA,MAAM,GAAG,MAAM,EAAEa,OAAO,CAAC,CAAC,CAAC,GAAG;EAC5C,CAAC,MAAM,IAAIb,MAAM,IAAI,IAAI,EAAE;IAAE;IAC3B,OAAO,IAAI,CAACA,MAAM,GAAG,IAAI,EAAEa,OAAO,CAAC,CAAC,CAAC,GAAG;EAC1C;EACA,OAAOL,WAAW,CAACR,MAAM,CAAC;AAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}